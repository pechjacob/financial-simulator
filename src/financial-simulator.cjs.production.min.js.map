{"version":3,"file":"financial-simulator.cjs.production.min.js","sources":["../src/utils.ts","../src/amount.ts","../src/calendar-date.ts"],"sourcesContent":["import * as uuid from 'uuid';\r\n\r\nexport function generateLocalUUID(): string {\r\n  return uuid.v1();\r\n}\r\n\r\nexport function integerFromJSON(value: any): number {\r\n  const n = numberFromJSON(value);\r\n  if (!Number.isInteger(n)) {\r\n    throw new Error(`Value expected to be an integer`);\r\n  }\r\n  return n;\r\n}\r\n\r\nexport function isObject(value: any): value is Object {\r\n  return typeof value === 'object' && value !== null;\r\n}\r\n\r\nexport function isNumber(value: any): value is number {\r\n  return typeof value === 'number';\r\n}\r\n\r\nexport function isString(value: any): value is string {\r\n  return typeof value === 'string';\r\n}\r\n\r\nexport function numberFromJSON(value: any): number {\r\n  if (!isNumber(value)) {\r\n    throw new Error('Value must be a number');\r\n  }\r\n  return value;\r\n}\r\n\r\nexport function padLeft(s: string, pad: string) {\r\n  const length = Math.max(s.length, pad.length);\r\n  return `${pad}${s}`.slice(pad.length + s.length - length);\r\n}\r\n\r\nexport function stringFromJSON(value: any): string {\r\n  if (!isString(value)) {\r\n    throw new Error('Value must be a string');\r\n  }\r\n  return value;\r\n}\r\n","import { isNumber, isObject } from './utils';\r\n\r\nexport enum Currency {\r\n  USD = 'USD', // Cents\r\n}\r\n\r\nexport type AmountJSON = {\r\n  currency: Currency;\r\n  value: number;\r\n};\r\n\r\n/**\r\n * Relative to a person's net worth, so positive added money to an\r\n * account, and negative removed it from a person's net worth.\r\n */\r\nexport class Amount {\r\n  public static fromJSON(value: AmountJSON): Amount {\r\n    if (!isObject(value)) {\r\n      throw new Error('Amount JSON value must be an object');\r\n    }\r\n\r\n    if (!isNumber(value.value)) {\r\n      throw new Error('Amount JSON value.value must be a number');\r\n    }\r\n\r\n    return new Amount(toCurrency(value.currency), value.value);\r\n  }\r\n\r\n  public static zero(currency: Currency): Amount {\r\n    return new Amount(currency, 0);\r\n  }\r\n\r\n  constructor(public currency: Currency, public value: number) {\r\n    if (!Number.isInteger(value)) {\r\n      throw new Error(`Amount value \"${value}\" must be an integer`);\r\n    }\r\n  }\r\n\r\n  public add(amount: Amount): Amount {\r\n    if (this.currency !== amount.currency) {\r\n      throw new Error(\r\n        `Account does not support multiple currencies, found \"${this.currency}\" and \"${amount.currency}\"`,\r\n      );\r\n    }\r\n\r\n    return new Amount(this.currency, this.value + amount.value);\r\n  }\r\n\r\n  public subtract(amount: Amount): Amount {\r\n    if (this.currency !== amount.currency) {\r\n      throw new Error(\r\n        `Account does not support multiple currencies, found \"${this.currency}\" and \"${amount.currency}\"`,\r\n      );\r\n    }\r\n\r\n    return new Amount(this.currency, this.value - amount.value);\r\n  }\r\n\r\n  public toJSON(): AmountJSON {\r\n    return {\r\n      currency: this.currency,\r\n      value: this.value,\r\n    };\r\n  }\r\n\r\n  public toString(): string {\r\n    switch (this.currency) {\r\n      case Currency.USD:\r\n        return Intl.NumberFormat('en-US', {\r\n          style: 'currency',\r\n          currency: 'USD',\r\n        }).format(this.value / 100);\r\n      default:\r\n        throw new Error(`Amount currency \"${this.currency}\" has no serializer`);\r\n    }\r\n  }\r\n}\r\n\r\nconst currencyValues = new Set(Object.values(Currency));\r\n\r\nexport function toCurrency(value: any): Currency {\r\n  if (!currencyValues.has(value)) {\r\n    throw new Error(`Currency value \"${value}\" is invalid`);\r\n  }\r\n\r\n  return value;\r\n}\r\n","import { padLeft } from './utils';\r\n\r\n// TODO: Is this the right way to work with days and years?\r\nexport const DAYS_PER_YEAR = 365.25;\r\n\r\nexport enum Month {\r\n  January = 1,\r\n  February = 2,\r\n  March = 3,\r\n  April = 4,\r\n  May = 5,\r\n  June = 6,\r\n  July = 7,\r\n  August = 8,\r\n  September = 9,\r\n  October = 10,\r\n  November = 11,\r\n  December = 12,\r\n}\r\n\r\nexport type CalendarDateJSON = string;\r\n\r\nexport class CalendarDate {\r\n  public static fromDate(value: Date): CalendarDate {\r\n    return new CalendarDate(\r\n      value.getFullYear(),\r\n      value.getMonth() + 1,\r\n      value.getDate(),\r\n    );\r\n  }\r\n\r\n  public static fromJSON(value: CalendarDateJSON): CalendarDate {\r\n    if (typeof value !== 'string') {\r\n      throw new Error('CalendarDate JSON value must be a string');\r\n    }\r\n\r\n    return CalendarDate.fromString(value);\r\n  }\r\n\r\n  /**\r\n   * Requires a \"YYYY-MM-DD\" format.\r\n   */\r\n  public static fromString(value: string): CalendarDate {\r\n    if (value.length !== 10 || value[4] !== '-' || value[7] !== '-') {\r\n      throw new Error(\r\n        `CalendarDate fromString value \"${value}\" is not a valid YYYY-MM-DD format`,\r\n      );\r\n    }\r\n\r\n    return new CalendarDate(\r\n      parseInt(value.slice(0, 4), 10),\r\n      stringToMonth(value.slice(5, 7)),\r\n      parseInt(value.slice(8, 10), 10),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * TODO: Add timezone support.\r\n   */\r\n  public static today(): CalendarDate {\r\n    return CalendarDate.fromDate(new Date());\r\n  }\r\n\r\n  constructor(public year: number, public month: Month, public day: number) {\r\n    const value = new Date(year, month - 1, day);\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth() + 1;\r\n    this.day = value.getDate();\r\n  }\r\n\r\n  public addDays(days: number): CalendarDate {\r\n    return CalendarDate.fromDate(\r\n      new Date(this.year, this.month - 1, this.day + days),\r\n    );\r\n  }\r\n\r\n  public addMonths(months: number): CalendarDate {\r\n    let date = CalendarDate.fromDate(\r\n      new Date(this.year, this.month - 1 + months, this.day),\r\n    );\r\n\r\n    const initialMonth = date.month;\r\n\r\n    while (this.day !== date.day) {\r\n      // Could turn to the next month if the destination month doens't\r\n      // have enough days in it.\r\n      date = date.addDays(months > 0 ? -1 : 1);\r\n\r\n      if (date.month !== initialMonth) {\r\n        if (months < 0) {\r\n          // Go back to the last day of the previous month.\r\n          return date.addDays(-1);\r\n        }\r\n        return date;\r\n      }\r\n    }\r\n\r\n    return date;\r\n  }\r\n\r\n  public addYears(years: number): CalendarDate {\r\n    return CalendarDate.fromDate(\r\n      new Date(this.year + years, this.month - 1, this.day),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * For sorting.\r\n   */\r\n  public compare(date: CalendarDate): number {\r\n    return this.toString().localeCompare(date.toString());\r\n  }\r\n\r\n  /**\r\n   * Positive means the date is in the past.\r\n   */\r\n  public daysAfter(date: CalendarDate): number {\r\n    const diffMilliseconds = this.toDate().valueOf() - date.toDate().valueOf();\r\n    return Math.floor(diffMilliseconds / MILLISECONDS_PER_DAY);\r\n  }\r\n\r\n  /**\r\n   * Positive means the date is forward in time.\r\n   */\r\n  public daysBefore(date: CalendarDate): number {\r\n    const diffMilliseconds = date.toDate().valueOf() - this.toDate().valueOf();\r\n    return Math.floor(diffMilliseconds / MILLISECONDS_PER_DAY);\r\n  }\r\n\r\n  /**\r\n   * Calling object is the subject being evaluated against the `target`.\r\n   *\r\n   * If the calling date has less days in it than the target month, then\r\n   * this will return `true`.\r\n   */\r\n  public isSameDayOfMonthAs(target: CalendarDate): boolean {\r\n    if (this.day > target.day) {\r\n      return false;\r\n    }\r\n\r\n    if (this.day < target.day) {\r\n      const isLastDay = this.addDays(1).month !== this.month;\r\n      return isLastDay;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public toDate(): Date {\r\n    return new Date(this.year, this.month - 1, this.day);\r\n  }\r\n\r\n  public toJSON(): CalendarDateJSON {\r\n    return this.toString();\r\n  }\r\n\r\n  public toString(): string {\r\n    const year = padLeft(this.year.toString(), '0000');\r\n    const month = padLeft(`${this.month}`, '00');\r\n    const day = padLeft(this.day.toString(), '00');\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n}\r\n\r\n// TODO: Fix for leap years.\r\nconst MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;\r\n\r\nconst monthValues = new Set(Object.values(Month));\r\n\r\nfunction stringToMonth(value: string): Month {\r\n  const month = parseInt(value, 10);\r\n\r\n  if (!isMonth(month)) {\r\n    throw new Error(`Value \"${value}\" is not a valid month`);\r\n  }\r\n\r\n  return month;\r\n}\r\n\r\nexport function isMonth(value: number): value is Month {\r\n  return monthValues.has(value);\r\n}\r\n\r\n/**\r\n * a0 and a1 are the startsOn and endsOn properties of the first range,\r\n * respectively.\r\n *\r\n * b0 and b1 are the startsOn and endsOn properties of the second range,\r\n * respectively.\r\n */\r\nexport function rangesOverlap(\r\n  a0: CalendarDate | null,\r\n  a1: CalendarDate | null,\r\n  b0: CalendarDate | null,\r\n  b1: CalendarDate | null,\r\n): boolean {\r\n  if (!a1) {\r\n    if (!a0 || !b1) {\r\n      return true;\r\n    }\r\n\r\n    if (b1.daysAfter(a0) > -1) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (!b1) {\r\n    if (!b0) {\r\n      return true;\r\n    }\r\n\r\n    if (a1.daysAfter(b0) > -1) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (!a0) {\r\n    if (!b0 || !a1) {\r\n      return true;\r\n    }\r\n\r\n    if (a1.daysAfter(b0) > -1) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (!b0) {\r\n    if (!a0 || !b1) {\r\n      return true;\r\n    }\r\n\r\n    if (b1.daysAfter(a0) > -1) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (a0.daysBefore(b1) > -1 && a1.daysAfter(b0) > -1) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n"],"names":["padLeft","s","pad","length","Math","max","slice","Currency","Month","Amount","currency","value","Number","isInteger","Error","fromJSON","isObject","isNumber","toCurrency","zero","add","amount","this","subtract","toJSON","toString","USD","Intl","NumberFormat","style","format","currencyValues","Set","Object","values","has","CalendarDate","year","month","day","Date","getFullYear","getMonth","getDate","fromDate","fromString","parseInt","isMonth","stringToMonth","today","addDays","days","addMonths","months","date","initialMonth","addYears","years","compare","localeCompare","daysAfter","diffMilliseconds","toDate","valueOf","floor","MILLISECONDS_PER_DAY","daysBefore","isSameDayOfMonthAs","target","monthValues","a0","a1","b0","b1"],"mappings":"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"}