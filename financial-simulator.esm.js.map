{"version":3,"file":"financial-simulator.esm.js","sources":["../src/utils.ts","../src/amount.ts","../src/calendar-date.ts"],"sourcesContent":["import * as uuid from 'uuid';\r\n\r\nexport function generateLocalUUID(): string {\r\n  return uuid.v1();\r\n}\r\n\r\nexport function integerFromJSON(value: any): number {\r\n  const n = numberFromJSON(value);\r\n  if (!Number.isInteger(n)) {\r\n    throw new Error(`Value expected to be an integer`);\r\n  }\r\n  return n;\r\n}\r\n\r\nexport function isObject(value: any): value is Object {\r\n  return typeof value === 'object' && value !== null;\r\n}\r\n\r\nexport function isNumber(value: any): value is number {\r\n  return typeof value === 'number';\r\n}\r\n\r\nexport function isString(value: any): value is string {\r\n  return typeof value === 'string';\r\n}\r\n\r\nexport function numberFromJSON(value: any): number {\r\n  if (!isNumber(value)) {\r\n    throw new Error('Value must be a number');\r\n  }\r\n  return value;\r\n}\r\n\r\nexport function padLeft(s: string, pad: string) {\r\n  const length = Math.max(s.length, pad.length);\r\n  return `${pad}${s}`.slice(pad.length + s.length - length);\r\n}\r\n\r\nexport function stringFromJSON(value: any): string {\r\n  if (!isString(value)) {\r\n    throw new Error('Value must be a string');\r\n  }\r\n  return value;\r\n}\r\n","import { isNumber, isObject } from './utils';\r\n\r\nexport enum Currency {\r\n  USD = 'USD', // Cents\r\n}\r\n\r\nexport type AmountJSON = {\r\n  currency: Currency;\r\n  value: number;\r\n};\r\n\r\n/**\r\n * Relative to a person's net worth, so positive added money to an\r\n * account, and negative removed it from a person's net worth.\r\n */\r\nexport class Amount {\r\n  public static fromJSON(value: AmountJSON): Amount {\r\n    if (!isObject(value)) {\r\n      throw new Error('Amount JSON value must be an object');\r\n    }\r\n\r\n    if (!isNumber(value.value)) {\r\n      throw new Error('Amount JSON value.value must be a number');\r\n    }\r\n\r\n    return new Amount(toCurrency(value.currency), value.value);\r\n  }\r\n\r\n  public static zero(currency: Currency): Amount {\r\n    return new Amount(currency, 0);\r\n  }\r\n\r\n  constructor(public currency: Currency, public value: number) {\r\n    if (!Number.isInteger(value)) {\r\n      throw new Error(`Amount value \"${value}\" must be an integer`);\r\n    }\r\n  }\r\n\r\n  public add(amount: Amount): Amount {\r\n    if (this.currency !== amount.currency) {\r\n      throw new Error(\r\n        `Account does not support multiple currencies, found \"${this.currency}\" and \"${amount.currency}\"`,\r\n      );\r\n    }\r\n\r\n    return new Amount(this.currency, this.value + amount.value);\r\n  }\r\n\r\n  public subtract(amount: Amount): Amount {\r\n    if (this.currency !== amount.currency) {\r\n      throw new Error(\r\n        `Account does not support multiple currencies, found \"${this.currency}\" and \"${amount.currency}\"`,\r\n      );\r\n    }\r\n\r\n    return new Amount(this.currency, this.value - amount.value);\r\n  }\r\n\r\n  public toJSON(): AmountJSON {\r\n    return {\r\n      currency: this.currency,\r\n      value: this.value,\r\n    };\r\n  }\r\n\r\n  public toString(): string {\r\n    switch (this.currency) {\r\n      case Currency.USD:\r\n        return Intl.NumberFormat('en-US', {\r\n          style: 'currency',\r\n          currency: 'USD',\r\n        }).format(this.value / 100);\r\n      default:\r\n        throw new Error(`Amount currency \"${this.currency}\" has no serializer`);\r\n    }\r\n  }\r\n}\r\n\r\nconst currencyValues = new Set(Object.values(Currency));\r\n\r\nexport function toCurrency(value: any): Currency {\r\n  if (!currencyValues.has(value)) {\r\n    throw new Error(`Currency value \"${value}\" is invalid`);\r\n  }\r\n\r\n  return value;\r\n}\r\n","import { padLeft } from './utils';\r\n\r\n// TODO: Is this the right way to work with days and years?\r\nexport const DAYS_PER_YEAR = 365.25;\r\n\r\nexport enum Month {\r\n  January = 1,\r\n  February = 2,\r\n  March = 3,\r\n  April = 4,\r\n  May = 5,\r\n  June = 6,\r\n  July = 7,\r\n  August = 8,\r\n  September = 9,\r\n  October = 10,\r\n  November = 11,\r\n  December = 12,\r\n}\r\n\r\nexport type CalendarDateJSON = string;\r\n\r\nexport class CalendarDate {\r\n  public static fromDate(value: Date): CalendarDate {\r\n    return new CalendarDate(\r\n      value.getFullYear(),\r\n      value.getMonth() + 1,\r\n      value.getDate(),\r\n    );\r\n  }\r\n\r\n  public static fromJSON(value: CalendarDateJSON): CalendarDate {\r\n    if (typeof value !== 'string') {\r\n      throw new Error('CalendarDate JSON value must be a string');\r\n    }\r\n\r\n    return CalendarDate.fromString(value);\r\n  }\r\n\r\n  /**\r\n   * Requires a \"YYYY-MM-DD\" format.\r\n   */\r\n  public static fromString(value: string): CalendarDate {\r\n    if (value.length !== 10 || value[4] !== '-' || value[7] !== '-') {\r\n      throw new Error(\r\n        `CalendarDate fromString value \"${value}\" is not a valid YYYY-MM-DD format`,\r\n      );\r\n    }\r\n\r\n    return new CalendarDate(\r\n      parseInt(value.slice(0, 4), 10),\r\n      stringToMonth(value.slice(5, 7)),\r\n      parseInt(value.slice(8, 10), 10),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * TODO: Add timezone support.\r\n   */\r\n  public static today(): CalendarDate {\r\n    return CalendarDate.fromDate(new Date());\r\n  }\r\n\r\n  constructor(public year: number, public month: Month, public day: number) {\r\n    const value = new Date(year, month - 1, day);\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth() + 1;\r\n    this.day = value.getDate();\r\n  }\r\n\r\n  public addDays(days: number): CalendarDate {\r\n    return CalendarDate.fromDate(\r\n      new Date(this.year, this.month - 1, this.day + days),\r\n    );\r\n  }\r\n\r\n  public addMonths(months: number): CalendarDate {\r\n    let date = CalendarDate.fromDate(\r\n      new Date(this.year, this.month - 1 + months, this.day),\r\n    );\r\n\r\n    const initialMonth = date.month;\r\n\r\n    while (this.day !== date.day) {\r\n      // Could turn to the next month if the destination month doens't\r\n      // have enough days in it.\r\n      date = date.addDays(months > 0 ? -1 : 1);\r\n\r\n      if (date.month !== initialMonth) {\r\n        if (months < 0) {\r\n          // Go back to the last day of the previous month.\r\n          return date.addDays(-1);\r\n        }\r\n        return date;\r\n      }\r\n    }\r\n\r\n    return date;\r\n  }\r\n\r\n  public addYears(years: number): CalendarDate {\r\n    return CalendarDate.fromDate(\r\n      new Date(this.year + years, this.month - 1, this.day),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * For sorting.\r\n   */\r\n  public compare(date: CalendarDate): number {\r\n    return this.toString().localeCompare(date.toString());\r\n  }\r\n\r\n  /**\r\n   * Positive means the date is in the past.\r\n   */\r\n  public daysAfter(date: CalendarDate): number {\r\n    const diffMilliseconds = this.toDate().valueOf() - date.toDate().valueOf();\r\n    return Math.floor(diffMilliseconds / MILLISECONDS_PER_DAY);\r\n  }\r\n\r\n  /**\r\n   * Positive means the date is forward in time.\r\n   */\r\n  public daysBefore(date: CalendarDate): number {\r\n    const diffMilliseconds = date.toDate().valueOf() - this.toDate().valueOf();\r\n    return Math.floor(diffMilliseconds / MILLISECONDS_PER_DAY);\r\n  }\r\n\r\n  /**\r\n   * Calling object is the subject being evaluated against the `target`.\r\n   *\r\n   * If the calling date has less days in it than the target month, then\r\n   * this will return `true`.\r\n   */\r\n  public isSameDayOfMonthAs(target: CalendarDate): boolean {\r\n    if (this.day > target.day) {\r\n      return false;\r\n    }\r\n\r\n    if (this.day < target.day) {\r\n      const isLastDay = this.addDays(1).month !== this.month;\r\n      return isLastDay;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public toDate(): Date {\r\n    return new Date(this.year, this.month - 1, this.day);\r\n  }\r\n\r\n  public toJSON(): CalendarDateJSON {\r\n    return this.toString();\r\n  }\r\n\r\n  public toString(): string {\r\n    const year = padLeft(this.year.toString(), '0000');\r\n    const month = padLeft(`${this.month}`, '00');\r\n    const day = padLeft(this.day.toString(), '00');\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n}\r\n\r\n// TODO: Fix for leap years.\r\nconst MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;\r\n\r\nconst monthValues = new Set(Object.values(Month));\r\n\r\nfunction stringToMonth(value: string): Month {\r\n  const month = parseInt(value, 10);\r\n\r\n  if (!isMonth(month)) {\r\n    throw new Error(`Value \"${value}\" is not a valid month`);\r\n  }\r\n\r\n  return month;\r\n}\r\n\r\nexport function isMonth(value: number): value is Month {\r\n  return monthValues.has(value);\r\n}\r\n\r\n/**\r\n * a0 and a1 are the startsOn and endsOn properties of the first range,\r\n * respectively.\r\n *\r\n * b0 and b1 are the startsOn and endsOn properties of the second range,\r\n * respectively.\r\n */\r\nexport function rangesOverlap(\r\n  a0: CalendarDate | null,\r\n  a1: CalendarDate | null,\r\n  b0: CalendarDate | null,\r\n  b1: CalendarDate | null,\r\n): boolean {\r\n  if (!a1) {\r\n    if (!a0 || !b1) {\r\n      return true;\r\n    }\r\n\r\n    if (b1.daysAfter(a0) > -1) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (!b1) {\r\n    if (!b0) {\r\n      return true;\r\n    }\r\n\r\n    if (a1.daysAfter(b0) > -1) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (!a0) {\r\n    if (!b0 || !a1) {\r\n      return true;\r\n    }\r\n\r\n    if (a1.daysAfter(b0) > -1) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (!b0) {\r\n    if (!a0 || !b1) {\r\n      return true;\r\n    }\r\n\r\n    if (b1.daysAfter(a0) > -1) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (a0.daysBefore(b1) > -1 && a1.daysAfter(b0) > -1) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n"],"names":["isObject","value","isNumber","padLeft","s","pad","length","Math","max","slice","Currency","Amount","currency","Number","isInteger","Error","fromJSON","toCurrency","zero","add","amount","subtract","toJSON","toString","USD","Intl","NumberFormat","style","format","currencyValues","Set","Object","values","has","DAYS_PER_YEAR","Month","CalendarDate","year","month","day","Date","getFullYear","getMonth","getDate","fromDate","fromString","parseInt","stringToMonth","today","addDays","days","addMonths","months","date","initialMonth","addYears","years","compare","localeCompare","daysAfter","diffMilliseconds","toDate","valueOf","floor","MILLISECONDS_PER_DAY","daysBefore","isSameDayOfMonthAs","target","isLastDay","monthValues","isMonth","rangesOverlap","a0","a1","b0","b1"],"mappings":"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"}